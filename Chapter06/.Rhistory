a
a[order(a[,1]), ]
a[order(a[,1], a[,2]),]
a[order(a[,1], -a[,2]),]
ff <- factor( c("Male", "Female", "Male", "Female", "Female") )
table
table(ff)
ff
a <-c(1,2,3)
b <-c(2,1,4)
b
x <- a <= b
x
y <- a >= b
y
x & Y
x & y
x && y
x[1] && y[1]
ret <- c(0.05 ,0.09 ,0.12 , -0.10 , -0.09 ,0.01)
arithmetic.average <- sum(ret)/length(ret)
arithmetic.average
(1,length(ret))+ret
(1,length(ret))
ret
rep(1,length(ret))
rep(1,length(ret))
rep(1,length(ret)) + ret
prod(rep(1,length(ret)) + ret)
prod(rep(1,length(ret))+ret)^(1/length(ret))
geometric.average <- prod(rep(1,length(ret))+ret)^(1/length(ret))-1
geometric.average
x<-matrix(c(1,2,3,4),nrow=2,ncol =2)
x
eigen(x)
det(x)
rank(x)
rev(x)
x
help(rank)
help(rev)
sort(x, decreasing = TRUE).
sort(x, decreasing = TRUE)
num = seq(10378001,10378100)
num
install.packages(aplpack)
install.packages('aplpack')
library('aplpack')
install.packages('tcltk')
install.packages("tcltk")
library('aplpack')
detach("package:aplpack", unload=TRUE)
library("aplpack", lib.loc="d:/R/R-3.4.2/library")
help("stars")
install.packages('TeachingDemos')
install.packages(map)
install.packages('aplpack')
install.packages('TeachingDemos')
install.packages('scatterplot3d')
install.packages('maps')
install.packages('geosphere')
library(maps)
library(geosphere)
map('state')
map("state", interior = FALSE)
map("state", boundary = FALSE, col="red", add = TRUE)
map("state", boundary = FALSE, col="red", add= FALSE)
map('world', fill = TRUE,col=heat.colors(10))
map('world')
xlim <-c(-171.738281, -56.601563)
ylim <-c(12.039321, 71.856229)
map("world", col="#f2f2f2", fill=TRUE, bg="white", lwd=0.05, xlim=xlim, ylim=ylim)
lat_ca <-39.164141
lon_ca <--121.64062
5lat_me <-45.21300
4lon_me <--68.906250
5lat_me <-45.21300
lat_ca <-39.164141
lon_ca <--121.640625
lat_me <-45.213004lon_me <--68.906250
lat_ca <-39.164141
lon_ca <--121.640625
lat_me <-45.213004;lon_me <--68.906250
inter <-gcIntermediate(c(lon_ca, lat_ca), c(lon_me, lat_me), n=50, addStartEnd=TRUE)
lines(inter)
lat_tx <-29.954935
lon_tx <--98.701172
inter2 <-gcIntermediate(c(lon_ca, lat_ca), c(lon_tx, lat_tx), n=50, addStartEnd=TRUE)
lines(inter2, col="red")
airports <-read.csv("http://datasets.flowingdata.com/tuts/maparcs/airports.csv", header=TRUE)
flights <-read.csv("http://datasets.flowingdata.com/tuts/maparcs/flights.csv", header=TRUE, as.is=TRUE)
map("world", col="#f2f2f2", fill=TRUE, bg="white", lwd=0.05, xlim=xlim, ylim=ylim)
fsub <-flights[flights$airline == "AA",]
for (j in 1:length(fsub$airline)) {
air1 <-airports[airports$iata == fsub[j,]$airport1,]
air2 <-airports[airports$iata == fsub[j,]$airport2,]
inter <-gcIntermediate(c(air1[1,]$long, air1[1,]$lat), c(air2[1,]$long, air2[1,]$lat), n=100, addStartEnd=TRUE)
lines(inter, col="black", lwd=0.8)
}
plot(density(rnorm(1000)))
mtcars
heatmap(as.matrix(mtcars),
Rowv=NA,
Colv=NA,
col = heat.colors(256),
scale="column",
margins=c(2,8),
main = "Car characteristics by Model")
help(mtcars)
sunflowerplot(iris[, 3:4], col = "gold", seg.col = "gold")
pairs(iris[,1:4])
plot(iris[,1:4],
main="Relationships between characteristics of iris flowers",
pch=19,
col="blue",
cex=0.9)
par(mfrow=c(3,1))
plot(x1,x2);plot(x2,x3);plot(x3,x1)
help("par")
colors()
dev.cur
dev.cur()
dev.next(dev.cur())
dev.list()
dev.prev(dev.cur())
dev.off(dev.cur())
dev.set(dev.next())
dev.cur()
dev.prev(dev.cur())
dev.new()
graphics.off
install.packages('scatterplot3d')
x<-y<-seq(-2*pi, 2*pi, pi/15)
x
y
z<-outer(x, y, f)
f<-function(x,y) sin(x)*sin(y)
z<-outer(x, y, f)
help(outer)
z
contour(x,y,z,col="blue")
contour(x,y,z,col="blue")
persp(x,y,z,theta=30, phi=30, expand=0.7,col="lightblue")
x <- read.table('D:\R\projects\ana\score.txt')
x <- read.table('D:/R/projects/ana/score.txt')
x <- read.table('D:/R/projects/ana/score.txt')
x <- read.table('D:/R/projects/ana/scores.txt')
x
x <- read.table('D:/R/projects/ana/scores.txt')
x
x <- read.table('D:/R/projects/ana/scores.txt', header=T)
x
source('D:/R/projects/ana/unison.R')
source('D:/R/projects/ana/outline.R')
X<-read.table("course.data")
X
X<-read.table("course.data", header = F)
X
X<-read.table("course.data", header = T)
X
outline(X)
source('D:/R/projects/ana/outline.R')
source('D:/R/projects/ana/unison.R')
unison(X)
stars(X)
outline(X)
boxplot(X$X1,X$X2,X$X3)
X
x1 = c(2,4, 3, 2, 4, 7, 7 ,2 ,2 ,5 ,4)
x2= c(2 ,5, 6, 8, 5, 10, 7, 12, 12, 6, 6)
x3 = c(3 ,7 ,11, 6 ,6 ,7 ,9 ,5 ,5 ,10, 6, 3 ,10)
plot(x1,x2,x3)
boxplot(x1,x2,x3)
help(plot)
y <- c(x1,x2,x3)
y
f <- factor(c(rep(1,length(x1)),rep(2,length(x2)),rep(3,length(x3))))
f
length(f)
length(x3)
length(x1)
length(x2)
plot(f,y)
boxplot(x1,x2,x3)
student <- read.table('student.txt',header = T)
student <- read.table('students.txt',header = T)
student
student_df= data.frame(student)
student_df
names(student_df) <- c('no','name','sex','age','height','weight')
student_df
attach(student_df)
plot(weight~height,col='blue')
coplot(weight~height|sex,col='green')
coplot(weight~height|age,col='red')
coplot(weight~height|age+sex,col='yellow')
x<-y<-seq(-2*pi, 2*pi, pi/15)
f<-function(x,y) sin(x)*sin(y)
z<-outer(x, y, f)
source('D:/R/projects/ana/outline.R')
z<-outer(x, y, f)
z
contour(x,y,z,col="blue")
persp(x,y,z,theta=30, phi=30, expand=0.7,col="lightblue")
x<-seq(-2, 3, 0.05)
y<-seq(-1, 7, 0.05)
3**3
f<-function(x,y) x**4 −2*x**2*y +x**2 −2x*y +2y**2 + 9/2.0*x−4*y +4
f<-function(x,y) x**4−2*x**2*y+x**2−2x*y+2y**2+9/2.0*x−4*y+4
f<-function(x,y) x**4-2*x**2*y+x**2−2x*y+2y**2+9/2.0*x−4*y+4
f<-function(x,y) x**4-2*x**2*y+x**2-2x*y+2y**2+9/2.0*x-4*y+4
f<-function(x,y) x**4-2*x**2*y+x**2-2*x*y+2*y**2+9/2.0*x-4*y+4
z<-outer(x, y, f)
contour(x,y,z,col="blue")
persp(x,y,z,theta=30, phi=30, expand=0.7,col="lightblue")
help("persp")
read.csv('applicants.csv')
read.csv('applicant.csv',header=T)
applicant = read.csv('applicant.csv',header=T)
app_df = data.frame(applicant)
tail(app_df)
attach(app_df)
applicant = read.table('applicant.data',header=T)
applicant
data.frame(applicant)
attach(applicant)
rm(app_df)
attach(applicant)
rm(applicant)
attach(applicant)
applicant = read.table('applicant.data',header=T)
data.frame(applicant)
attach(applicant)
applicant = read.table('applicant.data',header=T)
attach(applicant)
rm(applicant)
applicant = read.table('applicant.data',header=T)
data.frame(applicant)
attach(applicant)
applicant = read.table('applicant.data',header=T)
data.frame(applicant)
attach(applicant)
stars(a)
stars(applicant)
G1<-(SC+LC+SMS+DRV+AMB+GSP+POT)/7
G2<-(FL+EXP+SUIT)/3
G3<-(LA+HON+KJ)/3
G4<-AA
G5<-APP
b<-cbind(G1,G2,G3,G4,G5)
b
stars(b)
detach(a)
detach(b)
detach(applicant)
source('D:/R/projects/ana/unison.R')
unison(b)
library(quantmod)
library(tseries)
plot(msft$Close,main= "Stock Price Comparison",
ylim=c(0,800), col="red", type="l", lwd=0.5,
pch=19,cex=0.6, xlab="Date" ,ylab="Stock Price (USD)")
aapl<-get.hist.quote(instrument = "aapl", quote = c("Cl", "Vol"))
goog<-get.hist.quote(instrument = "goog", quote = c("Cl", "Vol"))
msft<-get.hist.quote(instrument = "msft", quote = c("Cl", "Vol"))
orcl<-get.hist.quote(instrument = "ORCL", quote = c("Cl", "Vol"))
plot(msft$Close,main= "Stock Price Comparison",
ylim=c(0,800), col="red", type="l", lwd=0.5,
pch=19,cex=0.6, xlab="Date" ,ylab="Stock Price (USD)")
lines(goog$Close,col="blue",lwd=0.5)
lines(aapl$Close,col="gray",lwd=0.5)
lines(orcl$Close,col="yellow",lwd=0.5)
legend("top",horiz=T,legend=c("Microsoft","Google","Apple", "Oracle"),
col=c("red","blue","gray","yellow"),lty=1,bty="n")
getSymbols("AAPL",src="yahoo")
class(aapl)
class(AAPL)
tail(AAPL)
tail(aapl)
barChart(AAPL)
candleChart(AAPL,theme="white")
library(maps)
help(layout)
yy<-layout(matrix(data=c(2,1), nrow=1, ncol=2), widths=c(8,1), heights=c(2,1))
#绘制右侧热力图例
par(mar = c(5,3,5,3),oma=c(0.2,0.2,0.2,0.2),mex=0.5)
image(x=1, y=0:length(breaks),z=t(matrix(breaks))*1.001,
col=colors[1:length(breaks)-1],axes=FALSE,breaks=breaks,
xlab="", ylab="", xaxt="n")
axis(4,at=0:(length(breaks)-1),
labels=round(breaks),col="white",las=1)
abline(h=c(1:length(breaks)),col="white",lwd=2,xpd=F)
#Map
map("world",regions = asia_who$Country,col =colors[findInterval(x$measure,breaks)],fill=TRUE,lty="blank" )
map("world",regions = "Bhutan",add = TRUE)
title("亚洲国家的Adult literacy rate\n（成人识字率)热力地图")
help(image)
help(grepl)
help(readRDS)
help(GetMap)
library(RgoogleMaps)
help(GetMap)
help(PlotOnStaticMap)
help(GetOsmMap)
help(readOGR)
help(plot)
library(maptools)
sfdata<-readShapeSpatial(system.file("shapes/sids.shp",
package="maptools")[1], proj4string=CRS("+proj=longlat"))
class(sfdata)
library(shapefiles)
help(system.file)
help(substr)
help(read.shapefile)
help(write.shapefile)
help(png)
help(pdf)
help(svg)
help(postscript)
help(mtext)
help(map)
library(maps)
library(geosphere)
help(map)
help(gcIntermediate)
help(colorRampPalette)
help(gcIntermediate)
help(unique)
X=c(5.1, 3.5, 7.1, 6.2, 8.8, 7.8, 4.5, 5.6, 8.0, 6.4)
Y =c(1907, 1287, 2700, 2373, 3260, 3000, 1947,2273,3113,2493)
plot(X, Y)
install.packages('AER')
> data(Affairs,package = "AER")
data(Affairs,package = "AER")
colnames(Affairs)
head(Affairs)
download.file("http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data",
"./german.data")
data <- read.table("./german.data")
data
dim(data)
colnames(data)
head(data)
class(data)
str(data)
library("neuralnet")
install.packages("neuralnet")
library("neuralnet")
NNModelAllNum <- neuralnet(V21 ~ V2 + V5 + V8, data)
NNModelAllNum
NNModel <- neuralnet(V21 ~ V1 + V2 + V5 + V8, data)
head(data)
dummyV1 <- model.matrix(~V1, data)
dummyV1
head(cbind(dummyV1, data$V1))
modelData <- model.matrix(~V1 + V2 + V5 + V8 + V21, data)
head(modelData)
NNModel <- neuralnet(V21 ~ V1A12 + V1A13 + V1A14 + V2 + V5 + V8, modelData)
library("nnet")
dummyV12 <- class.ind(data$V1)
head(dummyV12)
help(model.matrix
)
y=rnorm(10000,mean=5,sd=2)
head(y)
dim(y)
length(y)
x=rep(c("A","B"),each=5000)
length(x)
head(x)
tail(x)
dataset <- data.frame(x,y)
head(dataset)
tail(dataset)
require(caret)
install.packages(caret)
install.packages('caret')
install.packages(caret)
require(caret)
dum_Var <- dummyVars(y~x,dataset)
help("dummyVars")
head(dum_var)
dim(dum_var)
dum_Var
summary(dum_Var)
dataset_Dummy <- predict(dum_Var,dataset)
head(dataset_Dummy)
pill<-c(rep(1,4),rep(0,4))
danger<-c(rep(1,2),rep(0,2),rep(1,2),rep(0,2))
plan<-c(1,0,1,0,1,0,1,0)
affect<-c(1,11,0,0,28,23,8,0)
unaffect<-c(17,87,2,0,30,3,32,9)
birth<-data.frame(pill,danger,plan,affect,unaffect)
birth
birth$both<-cbind(birth$affect,unaffect)
birth
glm<-glm(both~pill+danger+plan,family=binomial,data=birth)
summary(glm)
class(birth$both)
birth$both
affect<-c(1,11,0,0,28,23,8,0)
unaffect<-c(17,87,2,0,30,3,32,9)
#1代表有，0代表无
ganran<-data.frame(
kss_factor=c(rep(1,4),rep(0,4)), danger_factor=c(rep(1,2),rep(0,2),rep(1,2),rep(0,2)), plan_factor=c(1,0,1,0,1,0,1,0),
both<-cbind(affect,unaffect)
)
ganran
glm<-glm(both~kss_factor+danger_factor+plan_factor,family=binomial,data=birth)model_glm<-glm(both~kss_factor+danger_factor+plan_factor,family=binomial,data=birth)
model_glm<-glm(both~kss_factor+danger_factor+plan_factor,family=binomial,data=birth)
birth<-data.frame(
kss_factor=c(rep(1,4),rep(0,4)), danger_factor=c(rep(1,2),rep(0,2),rep(1,2),rep(0,2)), plan_factor=c(1,0,1,0,1,0,1,0),
both<-cbind(affect,unaffect)
)
model_glm<-glm(both~kss_factor+danger_factor+plan_factor,family=binomial,data=birth)
summary(model_glm)
alloy<-data.frame(
x=c(37.0, 37.5, 38.0, 38.5, 39.0, 39.5, 40.0,
40.5, 41.0, 41.5, 42.0, 42.5, 43.0),
y=c(3.40, 3.00, 3.00, 3.27, 2.10, 1.83, 1.53,
1.70, 1.80, 1.90, 2.35, 2.54, 2.90)
)
lm.sol<-lm(y~1+x+I(x^2),data=alloy)
summary(lm.sol)
xfit<-seq(37,43,len=200)
yfit<-predict(lm.sol, data.frame(x=xfit))
plot(alloy$x,alloy$y)
lines(xfit, yfit)
poly(alloy$x,2)
lm.pol<-lm(y~1+poly(x,2),data=alloy)
summary(lm.pol)
plot(alloy$x,alloy$y)
xfit<-seq(37,43,len=200)
yfit<-predict(lm.pol, data.frame(x=xfit))
lines(xfit, yfit)
help(nls)
c(rep(2*4:21, c(2, 4, 4, 3, 3, 2, 3, 3, 3, 3, 2,
3, 2, 1, 2, 2, 1, 1)))
cl<-data.frame(
X=c(rep(2*4:21, c(2, 4, 4, 3, 3, 2, 3, 3, 3, 3, 2,
3, 2, 1, 2, 2, 1, 1))),
Y=c(0.49, 0.49, 0.48, 0.47, 0.48, 0.47, 0.46, 0.46,
0.45, 0.43, 0.45, 0.43, 0.43, 0.44, 0.43, 0.43,
0.46, 0.45, 0.42, 0.42, 0.43, 0.41, 0.41, 0.40,
0.42, 0.40, 0.40, 0.41, 0.40, 0.41, 0.41, 0.40,
0.40, 0.40, 0.38, 0.41, 0.40, 0.40, 0.41, 0.38,
0.40, 0.40, 0.39, 0.39)
)
nls.sol<-nls(Y~a+(0.49-a)*exp(-b*(X-8)), data=cl,
start = list( a= 0.1, b = 0.01 ))
nls.sum<-summary(nls.sol); nls.sum
xfit<-seq(8,44,len=200)
yfit<-predict(nls.sol, data.frame(X=xfit))
plot(cl$X, cl$Y)
lines(xfit,yfit)
fn<-function(a, b, X){
f1 <- 1-exp(-b*(X-8))
f2 <- -(0.49-a)*(X-8)*exp(-b*(X-8))
cbind(f1,f2)
}
nls.sum$sigma
source("paramet.int.R")
paramet.int(nls.sol)
setcw('R:/dataguru/RDataAna/R_modeling_source/Chapter06')
## 计算参数的区间估计
source("paramet.int.R")
paramet.int(nls.sol)
setwd('R:/dataguru/RDataAna/R_modeling_source/Chapter06')
## 计算参数的区间估计
source("paramet.int.R")
paramet.int(nls.sol)
lm.2<-lm(y~x+I(x^2),data=coffee)
summary(lm.2)
coffee<-data.frame(x=c(0,0,1,1,2,2,3,3,4,4,5,5,6,6),
y=c(508.1,498.4,568.2,577.3,651.7,657,713.4,697.5,755.3,758.9,787.6,792.1,841.4,931.8)
#做线性回归
lm.1<-lm(y~x,data=coffee)
coffee<-data.frame(x=c(0,0,1,1,2,2,3,3,4,4,5,5,6,6),
y=c(508.1,498.4,568.2,577.3,651.7,657,713.4,697.5,755.3,758.9,787.6,792.1,841.4,931.8)
)
lm.1<-lm(y~x,data=coffee)
summary(lm.1)
lm.2<-lm(y~x+I(x^2),data=coffee)
summary(lm.2)
xfit<-seq(0,6,len=200)
yfit<-predict(lm.2, data.frame(x=xfit))
plot(coffee$x,coffee$y)
lines(xfit, yfit)
plot(y~x)
abline(lm.1)
plot(y~x)
plot(coffe$x,coffe$y)
plot(coffee$x,coffee$y)
abline(lm.1)
x<-data.frame(X1=c(70,60,70,40,40,70,70,80,60,30,80,40,60,40,20,50,50,40,80,70,60,90,50,70,20,80,60,50,70,40,30,30,40,60,80,70,30,60,80,70),
X2=c(64,63,65,69,63,48,48,63,63,53,43,55,66,67,61,63,66,68,41,53,37,54,52,50,65,52,70,40,36,44,54,59,69,50,62,68,39,49,64,67),
X3=c(5,9,11,10,58,9,11,4,14,4,12,2,25,23,19,4,16,12,12,8,13,12,8,7,21,28,13,13,22,36,9,87,5,22,4,15,4,11,10,18),
X4=c(1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,0,0,0,0,0),
X5=c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
Y=c(1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1))
glm<-glm(Y~X1+X2+X3+X4+X5,family=binomial,data=x)
summary(glm)
pre<-predict(glm,data=x)
p<-exp(pre)/(1+exp(pre))
p
p
glm.new<-step(glm)
glm.fit<-glm(Y~X1+X4,family=binomial,data=x)
summary(glm.fit)
pre<-predict(glm.fit,data=x)
p<-exp(pre)/(1+exp(pre))
p
